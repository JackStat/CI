t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.01)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=100
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.01)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=20
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
### Vectorized ###
harry<-function(){
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
}
system.time(harry())
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.01)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=40
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
### Vectorized ###
harry<-function(){
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
}
system.time(harry())
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.01)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=40
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
### Vectorized ###
harry<-function(){
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
}
system.time(harry())
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.01)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=10
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
### Vectorized ###
harry<-function(){
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
}
system.time(harry())
#BREAKUP IS THE GRID OF PROBABILITY CUTPOINTS.  THE OUTERMOST LOOPS (I AND J VARIABLES) BOTH LOOP THROUGH THIS SAME SEQUENCE.
breakup=seq(0,1,0.1)
#NOBS IS THE NUMBER OF CHILDREN IN THE DATASET.  THIS WILL BE THE K VARIABLE IN THE INSIDE LOOP.
# nobs=200
# pdeath<-runif(200)
# pmorbidity<-runif(200)
# Outcome<-sample(c("No new morbidity", "Death", "New morbidity"), 200, replace=TRUE)
#THESE MATRICES WILL COUNT THE NUMBER OF OBSERVATIONS OF EACH TYPE THAT ARE CLASSIFIED CORRECTLY IN EACH CUTPOINT COMBINATION.  PRESET TO ZERO.
temp<-read.csv("C:\\Users\\thunt\\Desktop/probs_deriv.csv")
require(data.table)
require(dplyr)
nobs=1000
attach(temp[1:nobs,])
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
### Vectorized ###
harry<-function(){
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
}
system.time(harry())
correctgood
correctgood2
system.time(harry())
correctgood
correctdeath2=matrix(0,length(breakup),length(breakup))
correctmorb2=correctdeath2
correctgood2=correctdeath2
t1<-rep(0, (nobs*length(breakup)^2))
t2<-rep(0, (nobs*length(breakup)^2))
t3<-rep(0, (nobs*length(breakup)^2))
p=1
breakd1<-rep(NA, nobs*length(breakup)^2)
breakd2<-rep(NA, nobs*length(breakup)^2)
system.time(
for (i in 1:length(breakup)) {
for (j in 1:length(breakup)) {
for (k in 1:nobs) {
#FIRST SETTING: PREDICTED OUTCOME IS NO NEW MORBIDITY
if ( (pdeath[k]<=breakup[i]) & (pmorbidity[k]<breakup[j]) ){
correctgood2[i,j]=correctgood2[i,j]+(Outcome[k]=="No new morbidity")
t1[p]=1
}
#SECOND SETTING: PREDICTED OUTCOME IS DEATH
else if (pdeath[k]>breakup[i]) {
correctdeath2[i,j]=correctdeath2[i,j]+(Outcome[k]=="Death")
t2[p]=1
}
#OTHERWISE WE MUST BE IN THE THIRD SETTING: PREDICTED OUTCOME IS NEW MORBIDITY
else {
correctmorb2[i,j]=correctmorb2[i,j]+(Outcome[k]=="New morbidity")
t3[p]=1
}
breakd1[p]<-breakup[i]
breakd2[p]<-breakup[j]
p=p+1
}
}
}
)
correctgood2
correctgood
b2<-rep(breakup, length(breakup))
b2s<-sort(b2)
bob2<-data.table(
breakup1=rep(b2s, nobs),
breakup2=rep(b2, nobs),
Outcome=rep(Outcome, length(breakup)*length(breakup)),
pdeath=rep(pdeath, length(breakup)*length(breakup)),
pmorbidity=rep(pmorbidity, length(breakup)*length(breakup)))
bob2 <- within(bob2, cond1 <- ((pdeath<=breakup1) &
(pmorbidity<breakup2) &
Outcome=="No new morbidity"))
bob2 <- within(bob2, cond2 <- pdeath>breakup1 &
!cond1 &
Outcome=="Death")
bob2 <- within(bob2, cond3 <- !(cond1 | cond2) &
Outcome=="New morbidity")
#Grouping by first breakup to make smaller data set
by_brk<-group_by(bob2, breakup1, breakup2)
billy<-summarise(by_brk, correctgood=sum(cond1), correctdeath=sum(cond2), correctmorb=sum(cond3))
#-Converting back to a matrix
correctgood <- matrix((billy$correctgood), length(breakup), length(breakup), byrow=TRUE)
correctdeath <- matrix(billy$correctdeath, length(breakup), length(breakup), byrow=TRUE)
correctmorb <- matrix(billy$correctmorb, length(breakup), length(breakup), byrow=TRUE)
correctgood
correctgood2
require(shiny)
require(shiny)
getwd()
setwd("C:/Users/thunt/Downloads")
setwd("C:/Users/thunt/Dropbocx")
setwd("C:/Users/thunt/Dropbox")
cd
dir
dir()
getdd()
getwd()
setwd("C:/Users/thunt/Dropbox/CI")
dir()
runApp()
